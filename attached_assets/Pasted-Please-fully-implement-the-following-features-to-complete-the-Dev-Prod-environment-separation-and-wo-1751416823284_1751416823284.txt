Please fully implement the following features to complete the Dev/Prod environment separation and workflow support for Vantix CRM. Do not include GitHub integration or future-proofing features yet. These changes must fully separate development from production in terms of behavior, database access, and available tools.
	1.	Add a mechanism to explicitly launch either Production or Development mode without manually editing the .env file. Ideally, allow this through a dropdown or buttons on a lightweight Startup Selector UI that appears only if no .env is present or if launched from the Replit console with node startup.js. On selection, generate or modify the .env file to set ENVIRONMENT=development or remove the file entirely to default to production. Ensure this selection persists across server restarts and allows a user to easily return to Development if needed.
	2.	In index.html and script.js, completely hide and disable the “Debug” dropdown when in Production mode. Use the /api/environment endpoint or the isDevelopment flag to conditionally remove this element from the DOM at load.
	3.	Scan the entire codebase for any leftover or unused Dev/Prod splitting attempts. Remove duplicate logic, deprecated flags, and any hardcoded assumptions that may conflict with the finalized structure. Retain only one source of truth for environment detection via the .env file and server.js.
	4.	Create a new page accessible only in Development mode at the path /dev-console. Use route protection to ensure this page cannot be loaded in Production (return 403 or redirect to home). In index.html, add a link to this page that only renders in Dev mode (top nav or sidebar).
	5.	On the /dev-console page, display the following: current environment (PRODUCTION or DEVELOPMENT), current DB URL (truncated to hide passwords), current CRM version (from version.json or similar config), Test Mode status, count of customers, files, and tasks in the DB (via API).
	6.	Add a button labeled “Sync Dev DB from Production” on the Dev Console. When clicked, this should: drop all current Dev DB tables, clone the schema and data from the Production DB (assumes same schema), use a secure and safe SQL dump + restore method (or your preferred method), and show confirmation and timestamp of last sync. Protect this with a confirmation dialog: “This will permanently overwrite all Dev data. Continue?”
	7.	Add a button labeled “Load Sample/Test Data” to the Dev Console. When clicked, this should: add ~5 sample customers with basic data, attach mock files or notes, set different statuses and next steps, and use an internal endpoint /api/dev/load-sample-data. Ensure this endpoint only works in Dev mode.
	8.	Create a version.json file or a hardcoded list in dev-console.js containing at least two version entries: 1.0 (MVP) and 1.1 (System Notes + Test Mode). Display this in the Dev Console in a sortable table.
	9.	Add a dropdown in the Dev Console labeled “Switch Version”. Populate it with values from version.json. On selection, allow launching the chosen version by switching to a different folder if versions are folder-based, running a shell script to change branches if Git is in use, or restarting the server with the selected version’s startup script. Protect Production from switching this way; only available in Dev.
	10.	Add a field or editable textarea in the Dev Console to maintain a running changelog. Store this changelog in CHANGELOG.md or another versioned text file. Display a live preview below the editor. Show a “Last updated” timestamp.

All features must remain invisible and inaccessible in Production. All Dev features must have safety checks using the isDevelopment flag. Do not break any current MVP or 1.1 functionality. Please confirm what is already complete and begin implementation of the remaining features. Let me know when each part is ready for verification or testing.
